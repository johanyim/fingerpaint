use crate::color::{Color, Format};
use crate::palette::Palette;
use colored::Colorize;
use crossterm::{
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use ratatui::{Terminal, Frame};
use ratatui::prelude::{CrosstermBackend, Layout};
use std::io::{Read, Write, stdin,stdout, Stdout}; 
use anyhow::{Context, Result};


pub fn color_selection(palette: Palette) -> Result<Color> { 
    let keyboard = "qwertyuiopasdfghjkl;zxcvbnm,.";



    for character in keyboard.chars() {
        let col = palette.get_rgba(character);
        println!("{} = {}",
                 palette.get_name(character),
                 palette.get_string(character)
                    .truecolor(17,17,27)
                    .on_truecolor(col[0], col[1], col[2]));
    }
    enable_raw_mode()?;
    let mut stdout = stdout();
    execute!(stdout, EnterAlternateScreen)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    
    terminal.draw(keyboard_ui)?;

    disable_raw_mode()?;
    execute!(terminal.backend_mut(), LeaveAlternateScreen)?;

    return Ok(Color::new("black", Format::RGB, "#000000")
              .expect("converted color"));
}

fn keyboard_ui(frame: &mut Frame) {

    let layout = Layout::default();


}


// // fn render_styled_block(paragraph: &Paragraph, frame: &mut Frame, area: Rect) {
// //     let block = Block::new()
// //         .borders(Borders::ALL)
// //         .style(Style::new().blue().on_white().bold().italic())
// //         .title("Styled block");
// //     frame.render_widget(paragraph.clone().block(block), area);
// // }
// //
// // fn ui(frame render_styled_block(&paragraph, frame, layout[5][0]);
// //
// // let paragraph = placeholder_paragraph();
//
// // use anyhow::{Context, Result};
// // use crossterm::{
// //     event::{self, Event, KeyCode},
// //     execute,
// //     terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
// // };
// use anyhow::{Context, Result};
// use crossterm::{
//     execute,
//     terminal::{enable_raw_mode, EnterAlternateScreen},
// };
// use ratatui::{prelude::*, widgets::Paragraph};
// use std::{
//     io::{self, Stdout},
//     time::Duration,
// };
// type Terminal = ratatui::Terminal<CrosstermBackend<Stdout>>;
// type Result<T> = std::result::Result<T, Box<dyn Error>>;
//
// pub fn setup_terminal() -> Result<Terminal<CrosstermBackend<Stdout>>> {
//     let mut stdout = io::stdout();
//     crossterm::terminal::enable_raw_mode().context("failed to enable raw mode")?;
//     execute!(stdout, EnterAlternateScreen).context("unable to enter alternate screen")?;
//     Terminal::new(CrosstermBackend::new(stdout)).context("creating terminal failed")
// }
//
// fn run(terminal: &mut Terminal) -> Result<()> {
//     loop {
//         terminal.draw(ui)?;
//         if handle_events()?.is_break() {
//             return Ok(());
//         }
//     }
// }
//
// fn ui(frame: &mut Frame) {
//     let (title_area, layout) = calculate_layout(frame.size());
//
//     render_title(frame, title_area);
//
//     let paragraph = Paragraph::new("this");
// }
//
// /// Calculate the layout of the UI elements.
// ///
// /// Returns a tuple of the title area and the main areas.
// fn calculate_layout(area: Rect) -> (Rect, Vec<Vec<Rect>>) {
//     let layout = Layout::default()
//         .direction(Direction::Vertical)
//         .constraints([Constraint::Length(1), Constraint::Min(0)])
//         .split(area);
//     let title_area = layout[0];
//     let main_areas = Layout::default()
//         .direction(Direction::Vertical)
//         .constraints([Constraint::Max(4); 9])
//         .split(layout[1])
//         .iter()
//         .map(|&area| {
//             Layout::default()
//                 .direction(Direction::Horizontal)
//                 .constraints([Constraint::Percentage(50), Constraint::Percentage(50)])
//                 .split(area)
//                 .to_vec()
//         })
//         .collect_vec();
//     (title_area, main_areas)
// }
